#-*- coding: utf-8 -*-

class GPUPY_GL:
    CONTEXT = None

    """ whether the application is in debug mode. """
    DEBUG = False

    """ whether the application should print hints from the
        gpupy.gl library whenever it tries to help the developer. """
    HINTS = True

    """ whether the application should print gpupy.gl warnings """
    WARNINGS = True

    """ whether the application should print infos """
    INFO = True

    """ whether the application should use an OpenCL implementation
        if available. """
    USE_CL = True

    def create_context(**kwargs):
        pass

    @classmethod    
    def warn(cls, text):
        """ prints warnings what are generated by gpupy library """
        if cls.WARNINGS:
            print('\033[31mGPUPY WARNING:\033[0m ' + text)
    
    @classmethod            
    def info(cls, text):
        """ prints infos what are generated by gpupy library """
        if cls.WARNINGS:
            print('\033[32mGPUPY INFO:\033[0m ' + text)
    
    @classmethod            
    def hint(cls, text):
        """ prints some hints to help the developer """
        if cls.HINTS:
            print('\033[36mGPUPY HINT:\033[0m ' + text)
    
    @classmethod            
    def debug(cls, text):
        """ prints some hints to help the developer """
        if cls.DEBUG:
            print('\033[34mGPUPY DEBUG:\033[0m ' + text)
    
    @classmethod            
    def deprecated(cls, text):
        print('\033[34mGPUPY DEPRECATED:\033[0m ' + text)

    @classmethod
    def debug_wrap(cls, func, *args, **kwargs):
        if cls.DEBUG:
            cls.debug('{}({}{}{})'.format(
                func.__name__,
                ', '.join(str(a) for a in args),
                ', ' if len(kwargs) and len(args) else '',
                ', '.join('{}={}'.format(k, v) for (k, v) in kwargs.items())))
        func(*args, **kwargs)
