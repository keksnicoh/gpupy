{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"configi",
				"configuration_space_size"
			],
			[
				"unfi",
				"uniform_block_binding"
			],
			[
				"_plot",
				"_plotter_ubo"
			],
			[
				"unit",
				"unit_density_factor"
			],
			[
				"config",
				"configuration_space"
			],
			[
				"axes",
				"axes_unit"
			],
			[
				"trans",
				"transform_observables"
			],
			[
				"minor",
				"minor_grid_n"
			],
			[
				"init",
				"initial_arg_values\tstatement"
			],
			[
				"plot",
				"plot_resolution_factor"
			],
			[
				"conte",
				"content_position"
			],
			[
				"transf",
				"transform_observables"
			],
			[
				"tra",
				"transform_observables"
			],
			[
				"host_",
				"host_on_change"
			],
			[
				"cof",
				"configuration_space"
			],
			[
				"configura",
				"configuration_space"
			],
			[
				"obs",
				"transform_observables"
			],
			[
				"_ploit",
				"_plot_container"
			],
			[
				"obser",
				"observables"
			],
			[
				"hos",
				"host_listener"
			],
			[
				"ob",
				"observable_event"
			],
			[
				"attr_val",
				"attr_value"
			],
			[
				"attr",
				"attributes"
			],
			[
				"Ob",
				"ObservableAttributeProvider\tclass"
			],
			[
				"transfo",
				"transformation"
			],
			[
				"comp",
				"components\tparam"
			],
			[
				"wac",
				"watch_observables"
			],
			[
				"de",
				"descriptor\tstatement"
			],
			[
				"instn",
				"instance_obj"
			],
			[
				"Wa",
				"WeakKeyDictionary"
			],
			[
				"inst",
				"instance_obj"
			],
			[
				"insn",
				"instance_obj"
			],
			[
				"_plotc",
				"_plot_container\tstatement"
			],
			[
				"capt",
				"capture_size"
			],
			[
				"bord",
				"border_color"
			],
			[
				"_re",
				"_require_update_mesh"
			],
			[
				"positi",
				"positive_definite"
			],
			[
				"posit",
				"positive_definite"
			],
			[
				"size",
				"size_changed"
			],
			[
				"int",
				"instance_obj"
			],
			[
				"vertex",
				"vertex_count"
			],
			[
				"configur",
				"configuration_space"
			],
			[
				"captu",
				"capture_scaling"
			],
			[
				"confiu",
				"configuration_space"
			],
			[
				"_siz",
				"_size_changed\tfunction"
			],
			[
				"_Plot",
				"_PlotConfigurationSpace"
			],
			[
				"_crea",
				"_create_projection_matrix"
			],
			[
				"Camera",
				"Camera2D\tclass"
			],
			[
				"vert",
				"vertices"
			],
			[
				"NotImplemen",
				"NotImplementedError\tclass"
			],
			[
				"plane",
				"plane_shader"
			],
			[
				"Tex",
				"Texture2D"
			],
			[
				"plae",
				"plane_shader"
			],
			[
				"_cap",
				"_capture_size_changed\tfunction"
			],
			[
				"eve",
				"event_handler"
			],
			[
				"raise",
				"raise_as_shader_error"
			],
			[
				"_precom",
				"_precompile_uniform_blocks"
			],
			[
				"_pre",
				"_precompile_uniforms"
			],
			[
				"_gl",
				"_glfw_window\tstatement"
			],
			[
				"ste",
				"strength\tstatement"
			],
			[
				"str",
				"strength_value\tstatement"
			],
			[
				"stre",
				"strength_value\tstatement"
			],
			[
				"Str",
				"StrengthValues\tclass"
			],
			[
				"Stren",
				"StrengthGroup\tclass"
			],
			[
				"Streng",
				"StrengthValues\tclass"
			],
			[
				"stren",
				"strength_group"
			],
			[
				"Strength",
				"StrengthGroupValue\tclass"
			],
			[
				"Feed",
				"FeedbackExternPerson\tclass"
			],
			[
				"manda",
				"mandantId\tstatement"
			],
			[
				"entit",
				"entity_id"
			],
			[
				"mess",
				"message"
			],
			[
				"Tr",
				"TransferCompass\tclass"
			],
			[
				"back",
				"background-origin"
			],
			[
				"trn",
				"transfer_compass"
			],
			[
				"transfe",
				"transfer_compass"
			],
			[
				"transfer",
				"transfer_compass_id\tparam"
			],
			[
				"form",
				"form_data\tstatement"
			],
			[
				"im",
				"implementationPartner"
			],
			[
				"Stre",
				"StrengthSet\tclass"
			],
			[
				"mand",
				"mandant_id"
			],
			[
				"Strengt",
				"StrengthSet"
			],
			[
				"strn",
				"strengthsetcategory_id"
			],
			[
				"hidd",
				"hidden_category_element"
			],
			[
				"Strn",
				"StrengthSetCategory\tclass"
			],
			[
				"tr",
				"transfer_admin"
			],
			[
				"staer",
				"staerkenkompass2"
			],
			[
				"Impo",
				"ImproperlyConfigured\tclass"
			],
			[
				"impo",
				"import_data_path\tstatement"
			],
			[
				"fil",
				"filename\tstatement"
			],
			[
				"file",
				"filename"
			],
			[
				"NotIm",
				"NotImplementedError\tclass"
			],
			[
				"cont",
				"contextDict\tstatement"
			],
			[
				"pre",
				"prec_flt\tstatement"
			],
			[
				"VARU_F",
				"VARU_FACTOR"
			],
			[
				"ca",
				"cache_folder\tstatement"
			],
			[
				"devi",
				"device_id"
			],
			[
				"inte",
				"integrator_param\tstatement"
			],
			[
				"thermal_",
				"thermal_values\tstatement"
			],
			[
				"ther",
				"thermal_values\tstatement"
			],
			[
				"themr",
				"thermal_value\tstatement"
			],
			[
				"lock_",
				"lock_file\tstatement"
			],
			[
				"LOCK",
				"LOCK_BASE"
			],
			[
				"LOCK_D",
				"LOCK_DEVICES"
			],
			[
				"LO",
				"LOCK_DEVICES"
			],
			[
				"plat",
				"platform_devices\tstatement"
			],
			[
				"drv",
				"drv_field\tstatement"
			],
			[
				"field",
				"field_shape\tstatement"
			],
			[
				"fiel",
				"field_shape\tstatement"
			],
			[
				"jump",
				"jumping_configuration_j\tfunction"
			],
			[
				"queue_f",
				"queue_fname\tstatement"
			],
			[
				"exec",
				"execute_queue\tstatement"
			],
			[
				"exe",
				"execute_queue\tstatement"
			],
			[
				"ome",
				"omega_drv\tparam"
			],
			[
				"VAR",
				"VARJ_FILE"
			],
			[
				"color_",
				"color_schema_dyn\tstatement"
			],
			[
				"DRV_KA",
				"DRV_KAPITZA_WM"
			],
			[
				"prec",
				"prec_cmplx\tstatement"
			],
			[
				"gr",
				"graph_shape_render\tstatement"
			],
			[
				"cre",
				"create_sin"
			],
			[
				"JUMPIN",
				"JUMPING_ID"
			],
			[
				"crea",
				"create_approx_states"
			],
			[
				"ope",
				"operator\tparam"
			],
			[
				"latte",
				"latter_index\tstatement"
			],
			[
				"la",
				"latter_index\tstatement"
			],
			[
				"c",
				"callable\tfunction"
			],
			[
				"HAM",
				"HAMILTON_ARGS\tstatement"
			],
			[
				"POST_",
				"OBS_POST_CODE"
			],
			[
				"buf",
				"buf_size_expr\tstatement"
			]
		]
	},
	"buffers":
	[
		{
			"file": "gpupy/plot/plotter2d.py",
			"settings":
			{
				"buffer_size": 15776,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#-*- coding: utf-8 -*-\n\"\"\"\ncamera utils\n\nXXX\n - optimize projection view matrix creation (i.e.: only create new matrix is neccessary.)\n - look_at method is still broken\n - orthigraphic projection: cannot move in z direction.\n:author: Nicolas 'keksnicoh' Heimann\n\"\"\"\nfrom gpupy.gl import GlConfig\nfrom gpupy.gl.common import *\nfrom gpupy.gl.buffer import BufferObject\nfrom gpupy.gl.matrix import *\nimport numpy as np\n\nfrom OpenGL.GL import *\n\n# some default values\nDEFAULT_FOV  = 0.5 * 65.0 * np.pi / 180.0\nDEFAULT_FAR  = 10000\nDEFAULT_NEAR = 0.1\n\nclass Camera(object):\n    \"\"\"\n    camera classification.\n    A camera represents two matricies (project, view) to transform\n    verticies from world to screen space.\n\n    The data is uploaded into an uniform buffer object\n    which is binded to the default binding index reserved \n    at GlConfig.STATE.RESERVED_BUFFER_BASE['gpupy.gl.camery'].\n\n    .. code ::\n\n       camera = Camera()\n       camera.enable()\n\n    The camera object classifies as an object which is bound to\n    a opengl buffer base by using the Camera.gl_buffer_base attribute.\n    It is therefore possible to pass the camera into a uniform\n    block declaration of a shader\n\n    .. code ::\n\n       shader.declare_uniform('camera', camera)\n\n    Note that within the shader one can then use\n\n    .. code ::\n\n       {% uniform_block camera %}\n\n    This will generate the corresponding interface block of the camera.\n\n    Technical details:\n    ------------------\n    Angles (yaw, pitch, roll):\n    - yaw: angle to y-axis\n    - pitch: angle to z-axis\n    - roll: angle to x-axis\n\n    Position: p\n\n    The view matrix is given by\n\n         R_roll * R_pitch * R_yaw * T_p\n\n    where R is a rotation matrix and T a translation matrix.\n    \"\"\"\n    DTYPE = np.dtype([\n        ('mat_view',         np.float32, (4, 4)),\n        ('mat_projection',   np.float32, (4, 4)),\n        ('position',         np.float32, 3),\n        ('yaw',              np.float32),\n\n        ('direction',        np.float32, 3),\n        ('pitch',            np.float32),\n\n        ('direction_right',  np.float32, 3),\n        ('roll',             np.float32),\n\n        ('direction_top',    np.float32, 3),\n    ])\n\n    PROJECTION_ORTHOGRAPHIC = 0\n    PROJECTION_PERSPECTIVE = 1\n\n    def __init__(\n        self,\n        screensize=(2.0, 2.0),\n        projection=PROJECTION_ORTHOGRAPHIC,\n        dtype=DTYPE,\n        fov=DEFAULT_FOV,\n        far=DEFAULT_FAR,\n        near=DEFAULT_NEAR,\n        buffer_base=None):\n\n        \"\"\"\n        :param screensize: the scaling of the screensize (XXX: better name?)\n        :param projection: which kind of projection should be used.\n           available:\n           - PROJECTION_ORTHOGRAPHIC\n           - PROJECTION_PERSPECTIVE\n\n        :param dtype: the dtype of the camera buffer\n        :param fov: field of view\n        :param far: farest point\n        :param near: nearest point\n        :param buffer_base: the buffer base index which \n                            should be used by the uniform buffer.\n        \"\"\"\n\n        self.screensize         = screensize#\n        ensure_vec2(int, screensize)\n        self.initial_screensize = screensize#ensure_vec2(int, screensize)\n        self.projection         = projection\n        self.dtype              = dtype\n        self.buffer_base = buffer_base\n        self._position = (0, 0, 0)\n        self._rotation = (0, 0, 0)\n\n        self.gl_buffer_base = None\n\n        self.fov = fov\n        self.near = near\n        self.far = far\n        self._update_symmetric_projection_screensize()\n\n        (self.mat_projection, self.mat_view) = self.create_matricies()\n        self._camera = None\n        self.init_ubo()\n\n        self._last_ubo = None \n    def _update_symmetric_projection_screensize(self):\n        if self.projection == Camera.PROJECTION_ORTHOGRAPHIC:\n            self.right = self.screensize[0] / 2.0\n            self.left = - self.right\n\n            self.top = self.screensize[1] / 2.0\n            self.bottom = - self.top\n\n        elif self.projection == Camera.PROJECTION_PERSPECTIVE:\n            ratio   = float(self.screensize[0]) / self.screensize[1]\n            tangent = np.tan(self.fov)\n            height  = self.near * tangent\n            width   = height * ratio\n\n            self.right  = width\n            self.left   = -width\n\n            self.top    = height\n            self.bottom = -height\n\n\n    def init_ubo(self):\n        \"\"\" initializes camera ubo \"\"\"\n        camera = np.zeros(1, self.dtype)\n\n        self._ubo = BufferObject.to_device(camera, target=GL_UNIFORM_BUFFER)\n        self._ubo.bind_buffer_base(self.buffer_base if self.buffer_base is not None else GlConfig.STATE.RESERVED_BUFFER_BASE['gpupy.gl.camera'])\n\n        self.gl_buffer_base = self._ubo.gl_buffer_base\n        self._camera = camera\n\n        self._update_camera()\n\n    @property\n    def direction(self):\n        \"\"\" returns camera view direction vector \"\"\"\n        yaw = self._rotation[1]\n        pitch = self._rotation[0]\n        return (-np.cos(pitch)*np.sin(yaw), np.sin(pitch), np.cos(pitch)*np.cos(yaw))\n\n\n    @property\n    def direction_right(self):\n        \"\"\" returns right normal vector from camera space \"\"\"\n        yaw = self._rotation[1]-np.pi/2\n        return (-np.sin(yaw), 0, np.cos(yaw))\n\n\n    @property\n    def direction_top(self):\n        \"\"\" returns top normal vector from camera space \"\"\"\n        yaw = self._rotation[1]\n        pitch = self._rotation[0]-np.pi/2\n        return (-np.cos(pitch)*np.sin(yaw), np.sin(pitch), np.cos(pitch)*np.cos(yaw))\n\n    def enable(self):\n        \"\"\" enables the camera by binding the\n            buffer target \"\"\"\n        self._last_ubo = glGetIntegerv(GL_UNIFORM_BUFFER_BINDING)\n        self._ubo.bind_buffer_base(self.buffer_base)\n\n    def disable(self):\n        \"\"\" disables the camera by unbinding the\n            buffer target \"\"\"\n        self._ubo.bind_buffer_base(0)\n       # glBindBuffer(GL_UNIFORM_BUFFER, self._last_ubo)\n       # glBindBufferBase(GL_UNIFORM_BUFFER, self._last_ubo)\n    def create_matricies(self):\n        \"\"\" creates projection and view matrix.\n\n            view matrix:\n               R_roll * R_pitch * R_yaw * T \"\"\"\n        reflection_xy   = mat4_reflection_xy()\n        position_matrix = mat4_translation(*self._position)\n        rot_roll        = mat4_rot_z(self._rotation[2])\n        rot_yaw         = mat4_rot_y(self._rotation[1])\n        rot_pitch       = mat4_rot_x(self._rotation[0])\n\n        projection_matrix = self.create_projection_matrix()\n\n        return (projection_matrix, rot_roll.dot(rot_pitch.dot(rot_yaw.dot(position_matrix.dot(reflection_xy)))).T)\n\n    def set_screensize(self, framebuffer_size):\n        pass\n\n    def create_projection_matrix(self):\n        \"\"\" creates projection matricies. Thanks\n            to http://www.songho.ca/opengl/gl_projectionmatrix.html \"\"\"\n        if self.projection == Camera.PROJECTION_ORTHOGRAPHIC:\n            return np.array([\n                2.0 / (self.right - self.left), 0,                                                    0,  - (self.right + self.left) / (self.right - self.left),\n                0,                       -2.0 / (self.top - self.bottom),                              0,  - (self.top + self.bottom) / (self.top - self.bottom),\n                0,                       0,                              -2.0  / (self.far - self.near),  - (self.far + self.near) / (self.far - self.near),\n                0,                       0,                                                           0,                        1,\n            ], dtype=np.float32).reshape((4, 4)).T\n\n        elif self.projection == Camera.PROJECTION_PERSPECTIVE:\n            return np.array([\n                2.0 * self.near / (self.right - self.left), 0,                                          (self.right + self.left) / (self.right - self.left), 0,\n                0,                                          2.0 * self.near / (self.top - self.bottom), (self.top + self.bottom) / (self.top - self.bottom), 0,\n                0,                                          0,                                          - (self.far + self.near) / (self.far - self.near),   -2.0 * self.far * self.near / (self.far - self.near),\n                0,                                          0,                                          -1,                                                  0\n            ], dtype=np.float32).reshape((4, 4)).T\n\n        else:\n            raise ValueError('invalid camera projection. Available camera projections: Camera.PROJECTION_ORTHOGRAPHIC, Camera.PROJECTION_PERSPECTIVE')\n\n\n    def send(self, create_matricies=True):\n        \"\"\" send current camera data to uniform buffer. \"\"\"\n        if create_matricies:\n            (self.mat_projection, self.mat_view) = self.create_matricies()\n\n        self._update_camera()\n        self._ubo.set(self._camera)\n\n    def _update_camera(self):\n        \"\"\" update camera data \"\"\"\n        self._camera['mat_view']        = self.mat_view\n        self._camera['mat_projection']  = self.mat_projection\n        self._camera['yaw']             = self._rotation[1]\n        self._camera['pitch']           = self._rotation[0]\n        self._camera['roll']            = self._rotation[2]\n        self._camera['position']        = self._position\n        self._camera['direction']       = self.direction\n        self._camera['direction_right'] = self.direction_right\n        self._camera['direction_top']   = self.direction_top\n\n    def set_screensize(self, screensize, send=True):\n        \"\"\" will set a new screensize to the camera.\n            note that this function will override the projection\n            configuration r, l, t, b by assuming a symmetric\n            viewport. \"\"\"\n        self.screensize = ensure_vec2(float, screensize)\n        self._update_symmetric_projection_screensize()\n        send and self.send()\n\n\n    def set_position(self, position, send=True):\n        \"\"\" translates the camera to a given position \"\"\"\n        self._position = ensure_vec3(float, position)\n        send and self.send()\n\n\n    def translate(self, x=0, y=0, z=0, send=True):\n        \"\"\" translates the camera by a given translation \"\"\"\n        self._position = (\n            self._position[0] + float(x),\n            self._position[1] + float(y),\n            self._position[2] + float(z))\n\n        send and self.send()\n\n\n    def look_at(self, point):\n        \"\"\" calculates camera rotation to look at a certain point\n            at the current camera position \"\"\"\n        # XXX broken at the moment\n        x = self._position\n        v = np.subtract(point, x)\n        l = np.linalg.norm(v)\n        phi1 = np.arccos(v[2] / l)\n        phi2 = np.arctan(np.sqrt(v[0] ** 2 + v[1] ** 2) / v[2])\n\n        self._rotation = (\n            -phi1,\n            phi2,\n            self._rotation[2])\n        print(np.sqrt(v[0] ** 2 + v[1] ** 2) / v[2], v[1] / v[0], phi1, phi2)\n\n\n    def rotate(self, pitch=0, yaw=0, roll=0, send=True):\n        \"\"\" rotates the camera principal axes by given amount \"\"\"\n        self._rotation = (\n            self._rotation[0] + float(pitch),\n            self._rotation[1] + float(yaw),\n            self._rotation[2] + float(roll))\n\n        send and self.send()\n\n\n    def set_rotation(self, rotation, send=True):\n        \"\"\" sets camera principal axes \"\"\"\n        self._rotation = ensure_vec3(float, rotation)\n        send and self.send()\n\ndef keyboard_flyaround(move_yaw=(83, 87), move_pitch=(65, 68), move_roll=32):\n    def _handler(camera, keyboard):\n        did_something = False\n        if move_yaw[0] in keyboard:\n            camera.translate(5*camera.direction_top[0], -5*camera.direction_top[1], 5*camera.direction_top[2])\n            did_something = True\n        if move_yaw[1] in keyboard:\n            camera.translate(-5*camera.direction_top[0], 5*camera.direction_top[1], -5*camera.direction_top[2])\n            did_something = True\n        if move_pitch[0] in keyboard:\n            camera.translate(-5*camera.direction_right[0], 5*camera.direction_right[1], -5*camera.direction_right[2])\n            did_something = True\n        if move_pitch[1] in keyboard:\n            camera.translate(5*camera.direction_right[0], -5*camera.direction_right[1], 5*camera.direction_right[2])\n            did_something = True\n        if move_roll in keyboard and 340 in keyboard:\n            camera.translate(-5*camera.direction[0], -5*camera.direction[1], -5*camera.direction[2])\n            did_something = True\n        elif move_roll in keyboard:\n            camera.translate(x=5*camera.direction[0], y=5*camera.direction[1], z=5*camera.direction[2])\n            did_something = True\n        if 262 in keyboard:\n            camera.rotate(yaw=-0.01)\n            did_something = True\n        if 263 in keyboard:\n            camera.rotate(yaw=+0.01)\n            did_something = True\n        if 265 in keyboard:\n            camera.rotate(pitch=+0.01)\n            did_something = True\n        if 264 in keyboard:\n            camera.rotate(pitch=-0.01)\n            did_something = True\n        return did_something\n    return _handler\n",
			"file": "gpupy/gl/camera.py",
			"file_size": 13075,
			"file_write_time": 131319038160000000,
			"settings":
			{
				"buffer_size": 13084,
				"line_ending": "Unix"
			}
		},
		{
			"file": "gpupy/gl/buffer.py",
			"settings":
			{
				"buffer_size": 11335,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "gpupy/gl/components/widgets/frame.py",
			"settings":
			{
				"buffer_size": 6385,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "gpupy/plot/test/integration/plotter2d_basic.py",
			"settings":
			{
				"buffer_size": 3671,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "gpupy/gl/components/widgets/grid.frag.glsl",
			"settings":
			{
				"buffer_size": 5789,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "// Line antialias area (usually 1 pixel)"
			}
		},
		{
			"file": "gpupy/gl/components/widgets/grid.py",
			"settings":
			{
				"buffer_size": 6160,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "gpupy/plot/test/integration/plotter2d_layout.py",
			"settings":
			{
				"buffer_size": 6213,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "gpupy/gl/components/widgets/container.py",
			"settings":
			{
				"buffer_size": 8528,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "gpupy/gl/util.py",
			"settings":
			{
				"buffer_size": 132,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "gpupy/gl/common/__init__.py",
			"settings":
			{
				"buffer_size": 8189,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "gpupy/gl/context.py",
			"settings":
			{
				"buffer_size": 706,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "context.py"
			}
		},
		{
			"file": "gpupy/gl/vector.py",
			"settings":
			{
				"buffer_size": 9750,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 354.0,
		"last_filter": "pack en ",
		"selected_items":
		[
			[
				"pack en ",
				"Package Control: Enable Package"
			],
			[
				"Package Control: dele",
				"Package Control: Disable Package"
			],
			[
				"pa inst",
				"Package Control: Install Package"
			],
			[
				"color",
				"Colorsublime: Install Theme"
			],
			[
				"pa ins ",
				"Package Control: Install Package"
			],
			[
				"pa ins",
				"Package Control: Install Package"
			],
			[
				"pac ins",
				"Package Control: Install Package"
			],
			[
				"pa int",
				"Package Control: Install Package"
			],
			[
				"pacl ins",
				"Package Control: Install Package"
			],
			[
				"pa in ",
				"Package Control: Install Package"
			],
			[
				"pa in s",
				"Package Control: Install Package"
			],
			[
				"pack ins",
				"Package Control: Install Package"
			],
			[
				"pack in",
				"Package Control: Install Package"
			],
			[
				"pack remo ve ",
				"Package Control: Remove Package"
			],
			[
				"pack",
				"Package Control: Add Repository"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Install package",
				"Package Control: Install Package"
			],
			[
				"Instal",
				"Package Control: Install Package"
			],
			[
				"package control: inst",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"gitp ush ",
				"Git: Push"
			],
			[
				"git commt cur",
				"Git: Quick Commit Current File"
			],
			[
				"git commit cur",
				"Git: Quick Commit Current File"
			],
			[
				"git pull",
				"Git: Pull"
			],
			[
				"git push ",
				"Git: Push"
			],
			[
				"",
				"About"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"git statu",
				"Git: Status"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"git p",
				"Git: Pull"
			],
			[
				"git commit",
				"Git: Commit"
			],
			[
				"git stat",
				"Git: Status"
			],
			[
				"git pus",
				"Git: Push"
			],
			[
				"git psuh",
				"Git: Push Current Branch"
			],
			[
				"gitp ul",
				"Git: Pull"
			],
			[
				"git pl",
				"Git: Pull"
			],
			[
				"git sttu",
				"Git: Status"
			],
			[
				"git pul",
				"Git: Pull"
			],
			[
				"gitp ush",
				"Git: Push"
			],
			[
				"git pull ",
				"Git: Pull"
			],
			[
				"sublimeGit:A",
				"SublimeGit: Add License"
			],
			[
				"gitpl",
				"Git: Pull"
			],
			[
				"git checkout",
				"Git: Checkout"
			],
			[
				"gitpull",
				"Git: Pull"
			]
		],
		"width": 575.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/keksnicoh/gpupy",
		"/Users/keksnicoh/gpupy/docs",
		"/Users/keksnicoh/gpupy/docs/gl",
		"/Users/keksnicoh/gpupy/gpupy",
		"/Users/keksnicoh/gpupy/gpupy/__pycache__",
		"/Users/keksnicoh/gpupy/gpupy/gl",
		"/Users/keksnicoh/gpupy/gpupy/gl/common",
		"/Users/keksnicoh/gpupy/gpupy/gl/components",
		"/Users/keksnicoh/gpupy/gpupy/gl/driver",
		"/Users/keksnicoh/gpupy/gpupy/gl/examples",
		"/Users/keksnicoh/gpupy/gpupy/plot",
		"/Users/keksnicoh/gpupy/gpupy/plot/test",
		"/Users/keksnicoh/gpupy/gpupy/plot/test/integration"
	],
	"file_history":
	[
		"/Users/keksnicoh/gpupy/gpupy/gl/components/widgets/OLD.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/common/attributes.py",
		"/Users/keksnicoh/gpupy/README.md",
		"/Users/keksnicoh/gpupy/gpupy/gl/shader.py",
		"/Users/keksnicoh/gpupy/gpupy/plot/test/integration/plotter_2d_layout.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/texture.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/driver/glfw.py",
		"/Users/keksnicoh/gpupy/gpupy/plot/plotter2d.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/widgets/container.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/widgets/layout.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/widgets/frame.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/__init__.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/gltype.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/viewport.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/vector.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/common/__init__.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/widgets/grid.py",
		"/Users/keksnicoh/gpupy/gpupy/plot/test/integration/plotter2d_basic.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/widgets/__init__.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/widgets/viewport.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/examples/volumetric_raycasting.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/layout/boxes.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/common/observables.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/__init__.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/layout.py",
		"/Users/keksnicoh/gpupy/gpupy/plot/style.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/examples/test.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/scale.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/common.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/attributes.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/frame.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/style.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/box.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/camera.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/test/test_vector.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/util.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/framebuffer.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/buffer.py",
		"/Users/keksnicoh/gpupy/test.py",
		"/Users/keksnicoh/gpupy/gpupy/common/helper.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/mesh.py",
		"/Users/keksnicoh/gpupy/gpupy/common/color.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/camera.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/fps.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/font/renderer.py",
		"/Users/keksnicoh/gpupy/gpupy/plot/__init__.py",
		"/Users/keksnicoh/gpupy/gpupy/plot/test/integration/__init__.py",
		"/Users/keksnicoh/gpupy/gpupy/plot/test/__init__.py",
		"/Users/keksnicoh/gpupy/gpupy/plot/main.py",
		"/Users/keksnicoh/gpupy/gpupy/plot/plotter3d.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/config.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/matrix.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/examples/frame.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/examples/font.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/settings.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/boxlayout.py",
		"/Users/keksnicoh/gpupy/runtests.sh",
		"/Users/keksnicoh/gpupy/gpupy/gl/driver/qt.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/grid.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/path.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/test/test_glsl.py",
		"/Users/keksnicoh/gpupy/gpupy/gl/glsl.py",
		"/Users/keksnicoh/gpupy/docs/gl/shader.md",
		"/Users/keksnicoh/gpupy/gpupy/gl/components/framelayout.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/rating/templates/greeting.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/rating/templates/greeting_transfer.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/rating/templates/strengthWidget.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/templates/boxes/hint_box.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/rating/views/rating.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/rating/templates/step.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/views/briefing.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/data/management/commands/transfer_briefing_strengths.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/data/management/commands/exportdata.py",
		"/Users/keksnicoh/wrk/sk/skdeploy/docker-compose.yml",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/evaluation/services/__init__.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/templates/transfer/compass_admin.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/strength/models.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/locale/de/LC_MESSAGES/django.po",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/feedbackExtern/templates/inviteExternFeedbackEmailTransfer.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/evaluation/templates/evaluationHintContainer.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/evaluation/static/js/evaluation.js",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/evaluation/views/evaluation.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/views/transfer.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/evaluation/templates/evaluation.html",
		"/Users/keksnicoh/wrk/sk/skdeploy/container/web/Dockerfile",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/templates/transfer/overview.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/feedbackExtern/services/__init__.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/templates/transfer/confirm_delete.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/rating/templates/stepBase.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/templates/teams/teamWidget.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/feedbackExtern/views.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/feedbackExtern/models.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/rating/models.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/rating/services/ratingServices.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/models.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/rating/views/ajaxRating.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/rating/templates/rating.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/rating/templates/complete.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/rating/templates/popups/savePopup.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/compass/migrations/0003_data.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/templates/persons/personWidget.html",
		"/Users/keksnicoh/wrk/sk/infos",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/static/css/mandant.css",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/static/js/overview.js",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/static/css/overview.css",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/employee/models.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/compass/models.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/templates/transfer/invite_popup.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/templates/transfer/counter.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/data/management/commands/dummystrengths.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/compass/migrations/0005_compass_names.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/forms.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/feedbackExtern/forms.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/implementationPartner/templates/ipActiveWidget.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/static/admin/js/jquery.js",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/strength/forms.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/libs/common/views/utilities.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/templates/mandantBase.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/views/mandant.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/static/js/mandant.js",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/templates/transfer/edit_popup.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/templates/content/business.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/strength/static/js/strengthWizard.js",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/strength/templates/strengthsWizard.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/strength/views/strengthsWizard.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/cockpit/templates/feedBackCounter.html",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/strength/urls.py",
		"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps/mandant/urls.py"
	],
	"find":
	{
		"height": 54.0
	},
	"find_in_files":
	{
		"height": 134.0,
		"where_history":
		[
			"/Users/keksnicoh/gpupy/gpupy/gl",
			"/Users/keksnicoh/gpupy/gpupy",
			"/Users/keksnicoh/gpupy/gpupy/gl",
			"/Users/keksnicoh/wrk/sk/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/skdeploy",
			"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps",
			"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/skdeploy",
			"/Users/keksnicoh/wrk/sk/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps",
			"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass/apps",
			"/Users/keksnicoh/wrk/sk/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass/files/static",
			"/Users/keksnicoh/wrk/sk/staerkenkompass",
			"/Users/keksnicoh/wrk/sk/staerkenkompass/files/static",
			"",
			"/Users/keksnicoh/unih/GPU-approach-to-Quantum-Kapitza-Effect/numerics",
			"/Users/keksnicoh/slice-dice/valuenet.life/frontend",
			"/Users/keksnicoh/slice-dice/valuenet.life/frontend/src",
			"services/vbm",
			"",
			"from services.vbm.",
			"",
			"Collins\\Bundle\\Module\\Command",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"PLOTTER_UBO_DTYPE",
			"UBO_DTYPE",
			"GlConfig.STATE.RESERVED_BUFFER_BASE['gpupy.plot.plotter2d']",
			"frag_pos.y",
			"frag_pos.x",
			"10000",
			"tv.x",
			"outer_camera",
			"size",
			"configuration_space",
			"plane_resolution",
			"plane_size",
			"min",
			"plane_size",
			"capture_size",
			"_plotter_ubo_buffer",
			"return",
			"self.plane_resolution",
			"mat_cs_vertex",
			"mat_domain",
			"grid_dens",
			"grid",
			"cs",
			"length",
			"unit_density_factor",
			"last_diff",
			"cs",
			"dens",
			"last_diff",
			"0",
			"size",
			"density",
			"1.",
			"1",
			"observable",
			"observables",
			"val_init",
			"initial_value",
			"initial_arg_values",
			"instance_transformation",
			"self._transformation",
			"configuration_space",
			"configuration_space_size",
			"axes_unit_pixels",
			"line_color",
			"sub_line_color",
			"sub_grid_n",
			"grid",
			"minor_grid_width",
			"CastedAttrbiute",
			"CastedAttribute",
			"grid_width",
			"StridedVertexMesh",
			"mesh3d_rectangle",
			"Camera",
			"Camera2D",
			"create_vao_from_program_buffer_object",
			"/cl[0]",
			"grid_width",
			"min",
			"get_tick",
			"200",
			"color_out",
			"discard",
			"M_PI",
			"line_color",
			"200",
			"gl_FragColor",
			"PVM",
			"projection*view*model",
			"out_color",
			"gl_FragColor",
			"200",
			"transform_inverse",
			"iResolution/2.0",
			"= 2",
			"2",
			"5",
			"445",
			"5",
			"camera.mat_projection *camera.mat_view*mat_model*",
			"view",
			"model",
			"projection",
			"0.1",
			"size",
			"frg_tex",
			"some_test",
			"self.program.uniform_manager",
			"border_size",
			"Camera2D",
			"        self.camera.enable()\n",
			"plotter32",
			"5",
			"plot_padding",
			"color",
			".005",
			"0.75",
			"sf",
			"4",
			"2",
			"4",
			"2",
			"1",
			"size",
			"grid_width",
			"w_grid",
			"grid",
			"20",
			"print",
			"plotter4",
			"/2",
			"pixels",
			".99",
			"1",
			"2",
			"configuration_space",
			"1",
			"n_grid",
			"fn",
			"tfn",
			"n_grid",
			"15",
			"content_size",
			"capture_size",
			"configuration_space",
			"VectorAttribte",
			"GlState"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"from gpupy.gl.common import Event",
			"from gpupy.gl import GlConfig",
			"GlConfig.",
			"ViewPort",
			"from gpupy.gl.config import Gl",
			"from gpupy.gl.settings import LibrarySettings",
			"content_type=\"application/json\"",
			"except $1 as $2",
			"except $1 as $2:",
			"try:\n    from django.utils import simplejson\nexcept:\n    import simplejson",
			"transaction.atomic",
			"@ransaction.atomic",
			"@transaction.atomic",
			"from django.template.defaultfilters import truncatewords as truncate_words",
			"SafeText",
			"except $1 as e",
			"except Exception as e",
			"--EC='1'",
			"--N_0='0'",
			"sfd_field_ec4j1b50",
			"--wd=1.0",
			"sjj",
			"numerics",
			"freibetrag",
			"einmalzahlung",
			"services.vbm.rechner.neo",
			"IdenticalTo('services.vbm.",
			"from services.vbm.",
			"[1]",
			"a",
			"bundle.command.",
			"bundle.log.",
			"Collins\\Bundle\\Log",
			"Collins\\Bundle\\Command\\Command\\Yii",
			"Collins\\Bundle\\Command",
			"Collins\\Bundle\\Module\\Command",
			"ac",
			"Module\\Ac"
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": false,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "/Users/keksnicoh/gpupy"
		}
	],
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "gpupy/plot/plotter2d.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15776,
						"regions":
						{
						},
						"selection":
						[
							[
								1479,
								1479
							]
						],
						"settings":
						{
							"syntax": "Packages/Python 3/Python3.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 149.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "gpupy/gl/camera.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13084,
						"regions":
						{
						},
						"selection":
						[
							[
								3086,
								3086
							]
						],
						"settings":
						{
							"syntax": "Packages/Python 3/Python3.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "gpupy/gl/buffer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11335,
						"regions":
						{
						},
						"selection":
						[
							[
								9753,
								9767
							]
						],
						"settings":
						{
							"syntax": "Packages/Python 3/Python3.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3638.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "gpupy/gl/components/widgets/frame.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6385,
						"regions":
						{
						},
						"selection":
						[
							[
								3032,
								2997
							]
						],
						"settings":
						{
							"syntax": "Packages/Python 3/Python3.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1982.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "gpupy/plot/test/integration/plotter2d_basic.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3671,
						"regions":
						{
						},
						"selection":
						[
							[
								28,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python 3/Python3.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "gpupy/gl/components/widgets/grid.frag.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5789,
						"regions":
						{
						},
						"selection":
						[
							[
								68,
								68
							]
						],
						"settings":
						{
							"auto_name": "// Line antialias area (usually 1 pixel)",
							"syntax": "Packages/C++/C.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 311.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "gpupy/gl/components/widgets/grid.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6160,
						"regions":
						{
						},
						"selection":
						[
							[
								250,
								213
							]
						],
						"settings":
						{
							"syntax": "Packages/Python 3/Python3.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "gpupy/plot/test/integration/plotter2d_layout.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6213,
						"regions":
						{
						},
						"selection":
						[
							[
								2983,
								2998
							]
						],
						"settings":
						{
							"syntax": "Packages/Python 3/Python3.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 724.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "gpupy/gl/components/widgets/container.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8528,
						"regions":
						{
						},
						"selection":
						[
							[
								2787,
								2787
							]
						],
						"settings":
						{
							"syntax": "Packages/Python 3/Python3.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2312.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "gpupy/gl/util.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 132,
						"regions":
						{
						},
						"selection":
						[
							[
								132,
								132
							]
						],
						"settings":
						{
							"syntax": "Packages/Python 3/Python3.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "gpupy/gl/common/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8189,
						"regions":
						{
						},
						"selection":
						[
							[
								2914,
								2914
							]
						],
						"settings":
						{
							"syntax": "Packages/Python 3/Python3.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1559.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "gpupy/gl/context.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 706,
						"regions":
						{
						},
						"selection":
						[
							[
								43,
								43
							]
						],
						"settings":
						{
							"auto_name": "context.py",
							"syntax": "Packages/Python 3/Python3.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "gpupy/gl/vector.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9750,
						"regions":
						{
						},
						"selection":
						[
							[
								1335,
								1335
							]
						],
						"settings":
						{
							"syntax": "Packages/Python 3/Python3.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 387.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 64.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 27.0
	},
	"output.find_results":
	{
		"height": 156.0
	},
	"output.git-checkout":
	{
		"height": 112.0
	},
	"output.git-commit":
	{
		"height": 112.0
	},
	"output.git-pull":
	{
		"height": 216.0
	},
	"output.git-push":
	{
		"height": 162.0
	},
	"output.unsaved_changes":
	{
		"height": 118.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"vre_pla",
				"services/vbm/application/vre_playground.py"
			],
			[
				"client",
				"services/vbm/api/client.py"
			],
			[
				"param",
				"services/vbm/rechner/parameters.py"
			],
			[
				"tax.",
				"services/vbm/rechner/tax.py"
			],
			[
				"vre",
				"services/vbm/application/vre.py"
			],
			[
				"optlib",
				"services/vbm/rechner/calculator/optlib_neo.py"
			],
			[
				"test_",
				"valuenet.vbm/vbm/rechner/test/test_schema.py"
			],
			[
				"luecken",
				"vre-java-src/code/Entgeltoptimierer/src/rechner/logic/LueckenBerechnung.java"
			],
			[
				"basics",
				"vre-java-src/code/Entgeltoptimierer/src/utils/Basics.java"
			],
			[
				"luece",
				"valuenet.vbm/vbm/rechner/calculator/luecke.py"
			],
			[
				"",
				"__init__.py"
			],
			[
				"ste",
				"rechner_future/steuerrechner.py"
			],
			[
				"brut",
				"rechner_future/calculator/brutto.py"
			],
			[
				"fa",
				"lib/engine/keyboard/flyaroundHandler.py"
			],
			[
				"timelin",
				"src/timeline-extensions.js"
			],
			[
				"migsubsi",
				"migrations/m130621_083047_position_subsize_alter.php"
			],
			[
				"add_more_ro",
				"migrations/m140227_121658_add_more_roles.php"
			],
			[
				"io",
				"modules/Command/Helper/IO.php"
			],
			[
				"stotest",
				"tests/Module/Command/Model/StoryTest.php"
			],
			[
				"debepos",
				"models/DeliveryBillOrderPosition.php"
			],
			[
				"bidapronrag",
				"models/business/Tasks/BiDataProviderProductCategorySecondaryAggregationTask.php"
			],
			[
				"provacon",
				"controllers/ProductVariantController.php"
			],
			[
				"orcont",
				"controllers/OrderController.php"
			],
			[
				"cdbcommand",
				"commands/BiDataCommand.php"
			],
			[
				"mautoc",
				"extensions/Metronic/MAutoCompleteField.php"
			],
			[
				"reconformmo",
				"modules/Ac/Framework/RequestConfiguration/FormModel.php"
			],
			[
				"supcon",
				"controllers/SupplierController.php"
			],
			[
				"main.p",
				"config/main.php"
			],
			[
				"bas",
				"config/base.php"
			],
			[
				"mana",
				"modules/Ac/Framework/Manager.php"
			],
			[
				"manager",
				"modules/Ac/Framework/Manager.php"
			],
			[
				"acl",
				"config/acl.php"
			],
			[
				"docma",
				"models/Ac/Framework/Mapper/DocumentMapper.php"
			],
			[
				"pro",
				"models/Product.php"
			],
			[
				"_orderlist",
				"views/deliveryBill/_orderList.php"
			],
			[
				"stddocum",
				"models/Ac/Framework/Mapper/StdDocument.php"
			],
			[
				"managertest",
				"tests/Model/Ac/Framework/ManagerTest.php"
			],
			[
				"order",
				"models/Order.php"
			],
			[
				"modemodel",
				"models/PositionsReportModel.php"
			],
			[
				"debilord",
				"models/DeliveryBillOrder.php"
			],
			[
				"warcomm",
				"commands/WarehouseMovementCommand.php"
			],
			[
				"debcon",
				"controllers/DeliveryBillController.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/py/plt/plt.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 320.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 444.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 234.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
